.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.48.5.
.TH PYNML "1" "December 2021" "pynml v0.5.18" "User Commands"
.SH NAME
pynml \- manual page for pynml v0.5.18
.SH DESCRIPTION
usage: pynml [\-h|\-\-help] [<shared options>] <one of the mutually\-exclusive options>
.PP
Python utilities for NeuroML2
.SS "optional arguments:"
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-version\fR
Print version and exit
.SS "Shared options:"
.IP
These options can be added to any of the mutually\-exclusive options
.TP
\fB\-verbose\fR {DEBUG,INFO,WARNING,ERROR,CRITICAL}
Verbose output (default: WARNING)
.TP
\fB\-java_max_memory\fR MAX
Java memory for jNeuroML, e.g. 400M, 2G (used in
\fB\-Xmx\fR argument to java)
.TP
\fB\-nogui\fR
Suppress GUI,
i.e. show no plots, just save results
.TP
<LEMS/NeuroML 2 file(s)>
LEMS/NeuroML 2 file(s) to process
.SS "Mutually-exclusive options:"
.IP
Only one of these options can be selected
.TP
\fB\-sedml\fR
(Via jNeuroML) Load a LEMS file, and convert
simulation settings (duration, dt, what to save)
to SED\-ML format
.TP
\fB\-neuron\fR ...
(Via jNeuroML) Load a LEMS file, and convert it to
NEURON format.
The full format of the '\-neuron' option is:
\fB\-neuron\fR [\-nogui] [\-run] [\-outputdir dir] <LEMS file>
.TP
\fB\-nogui\fR
do not generate gtaphical elements in NEURON,
just run, save data, and quit
.TP
\fB\-run\fR
compile NMODL files and run the main NEURON
hoc file (Linux only currently)
.TP
\fB\-outputdir\fR <dir>
generate NEURON files in directory <dir>
.TP
<LEMS file>
the LEMS file to use
.TP
\fB\-netpyne\fR ...
(Via jNeuroML) Load a LEMS file, and convert it to
NetPyNE format.
The full format of the '\-netpyne' option is:
\fB\-netpyne\fR [\-run] [\-outputdir dir] [\-np cores] <LEMS file>
.TP
\fB\-run\fR
compile NMODL files and run the NetPyNE
simulation (Linux only currently)
.TP
\fB\-outputdir\fR <dir>
generate NEURON files in directory <dir>
.TP
\fB\-np\fR <cores>
number of cores to run with (if using MPI)
.TP
<LEMS file>
the LEMS file to use
.TP
\fB\-svg\fR
(Via jNeuroML) Convert NeuroML2 file (network & cells)
to SVG format view of 3D structure
.TP
\fB\-png\fR
(Via jNeuroML) Convert NeuroML2 file (network & cells)
to PNG format view of 3D structure
.TP
\fB\-swc\fR
Export all Cells from a NeuroML file to SWC format
.TP
\fB\-dlems\fR
(Via jNeuroML) Load a LEMS file, and convert it
to dLEMS format, a distilled form of LEMS in JSON
.TP
\fB\-vertex\fR
(Via jNeuroML) Load a LEMS file, and convert it
to VERTEX format
.TP
\fB\-xpp\fR
(Via jNeuroML) Load a LEMS file, and convert it
to XPPAUT format
.TP
\fB\-dnsim\fR
(Via jNeuroML) Load a LEMS file, and convert it
to DNsim format
.TP
\fB\-brian\fR
(Via jNeuroML) Load a LEMS file, and convert it
to Brian format
.TP
\fB\-brian2\fR
(Via jNeuroML) Load a LEMS file, and convert it
to Brian2 format
.TP
\fB\-moose\fR
(Via jNeuroML) Load a LEMS file, and convert it
to Moose format
.TP
\fB\-sbml\fR
(Via jNeuroML) Load a LEMS file, and convert it
to SBML format
.TP
\fB\-matlab\fR
(Via jNeuroML) Load a LEMS file, and convert it
to MATLAB format
.TP
\fB\-cvode\fR
(Via jNeuroML) Load a LEMS file, and convert it
to C format using CVODE package
.TP
\fB\-nineml\fR
(Via jNeuroML) Load a LEMS file, and convert it
to NineML format
.TP
\fB\-spineml\fR
(Via jNeuroML) Load a LEMS file, and convert it
to SpineML format
.TP
\fB\-sbml\-import\fR <SBML file> duration dt
(Via jNeuroML) Load a SBML file, and convert it
toLEMS format using values for duration & dt
in ms (ignoring SBML units)
.TP
\fB\-sbml\-import\-units\fR <SBML file> duration dt
(Via jNeuroML) Load a SBML file, and convert it
to LEMS format using values for duration & dt
in ms (attempt to extract SBML units; ensure units
are valid in the SBML!)
.TP
\fB\-vhdl\fR neuronid <LEMS file>
(Via jNeuroML) Load a LEMS file, and convert it
to VHDL format
.TP
\fB\-graph\fR level
Load a NeuroML file, and convert it to a graph using GraphViz.
Detail is set by level (min20..0..20, where min implies negative)
An optional single letter suffix can be used to select engine
Example: 1d for level 1, using the dot engine
Available engines: {'d': 'dot', 'c': 'circo', 'n': 'neato', 't': 'twopi', 'f': 'fdp', 's': 'sfdp', 'p': 'patchwork'}
.TP
\fB\-lems\-graph\fR
(Via jNeuroML) Load LEMS file, and convert it to a
graph using GraphViz.
.TP
\fB\-matrix\fR level
Load a NeuroML file, and convert it to a matrix displaying
connectivity. Detail is set by level (1, 2, etc.)
.TP
\fB\-validate\fR
(Via jNeuroML) Validate NeuroML2 file(s) against the
latest Schema
.TP
\fB\-validatev1\fR
(Via jNeuroML) Validate NeuroML file(s) against the
v1.8.1 Schema
.SH ENVIRONMENT
.PP
pyNeuroML v0.5.18 (libNeuroML v0.3.1, jNeuroML v0.11.0)
.SH "SEE ALSO"
.BR pynml (1),
.BR pynml-channelanalysis (1),
.BR pynml-plotspikes (1),
.BR pynml-modchannelanalysis (1),
.BR pynml-povray (1),
.BR pynml-sonata (1),
.BR pynml-summary (1),
.BR pynml-tune (1).
.PP
Please see https://docs.neuroml.org for complete documentation on the NeuroML standard and the software ecosystem.
